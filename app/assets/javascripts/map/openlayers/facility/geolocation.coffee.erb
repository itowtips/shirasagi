class @Openlayers_Geolocation_Map
  constructor: (canvas, opts = {}) ->
    @canvas        = canvas
    @opts          = opts
    @markerFeature = null
    @markerLayer   = null
    @popup         = null
    @markerIcon    = '/assets/img/map-marker.png'
    @clickIcon     = '/assets/img/map-marker-click.png'
    @clickMarkerId = null
    @baseLayers    = {}

    @render()

  setMapLoc: (ele, lat, lon)->
    lat = Math.ceil(lat * Math.pow(10,6)) / Math.pow(10,6)
    lon = Math.ceil(lon * Math.pow(10,6)) / Math.pow(10,6)
    ele.val(lon.toFixed(6) + "," + lat.toFixed(6))
    return

  render: () ->
    @initMap()
    @initPopup()
    if @opts['markers']
      @renderMarkers(@opts['markers'])
    @resize()
    @renderEvents()
    if @opts['defaultLayer']
      @setBaseLayer(@opts['defaultLayer'])

  createLayers: (layerOpts) ->
    layers = []

    # add config layers
    for opts in layerOpts
      source     = opts["source"]
      url        = opts["url"]
      projection = opts["projection"]

      layer = new ol.layer.Tile({
        source: new ol.source[source]({
          url: url
          projection: projection
        })
      })
      layers.push layer
      @baseLayers[source] = layer

    # add google layer
    layer = new olgm.layer.Google()
    layers.push layer
    @baseLayers["GOOGLE"] = layer

    for i in [0..layers-1]
      if i != 0
        layers[i].setVisible(false)

    return layers

  initMap: ->
    center = @opts['center'] || [138.252924,36.204824]

    layerOpts = @opts['layers']
    layerOpts ||= [
      source: "XYZ"
      url: "http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png"
      projection: "EPSG:3857"
    ]

    @map = new ol.Map
      target: @canvas
      renderer: ['canvas', 'dom']
      interactions: olgm.interaction.defaults()
      layers: @createLayers(layerOpts)
      controls: ol.control.defaults
        attributionOptions:
          collapsible: false
      view: new ol.View
        projection: "EPSG:3857"
        center: ol.proj.transform(center, "EPSG:4326", "EPSG:3857")
        maxZoom: 18
        zoom: @opts['zoom'] || 10
      logo: true

    # activate olgm
    olGM = new olgm.OLGoogleMaps({map: @map})
    olGM.activate();

  setBaseLayer: (name) ->
    for n, layer of @baseLayers
      if name == n
        layer.setVisible(true)
      else
        layer.setVisible(false)

  initPopup: ->
    $("body").append('<div id="marker-popup"><div class="closer"></div><div class="content"></div></div>')
    @popup = $('#marker-popup')
    @popup.hide()

    @popupOverlay = new ol.Overlay(({
      element: @popup.get(0),
      autoPan: true,
      autoPanAnimation: {
        duration: 250
      }
    }))
    @map.addOverlay(@popupOverlay)

    @map.on 'pointermove', (e) =>
      if (e.dragging)
        @popup.hide()
        return
      pixel = @map.getEventPixel(e.originalEvent)
      hit = @map.hasFeatureAtPixel(pixel)
      cursor = `hit ? 'pointer' : ''`
      @map.getTarget().style.cursor = cursor

    @popup.find('.closer').on 'click', (e) =>
      @popupOverlay.setPosition(undefined)
      $(this).blur()
      return false

  showPopup: (feature, coordinate) ->
    markerHtml = feature.get("markerHtml")
    unless markerHtml
      @popup.hide()
      return

    @popup.find('.content').html(markerHtml)
    @popup.show()
    @popupOverlay.setPosition(coordinate)

  renderEvents: ()->
    @map.on 'click', (e)=>
      feature = @map.forEachFeatureAtPixel(e.pixel, (feature, layer) ->
        return feature
      )

      if feature && (feature.get("featureType") == "marker")
        @showPopup(feature, e.coordinate)
        return

      if !@opts["clickEnabled"]
        return

      if @clickMarkerId
        feature = @getMarker(@clickMarkerId)
        source = @markerLayer.getSource()
        source.removeFeature(feature)

      pos = ol.proj.transform(e.coordinate, "EPSG:3857", "EPSG:4326")
      # normalize geo position
      pos[0] += 360 while pos[0] < 180
      pos[0] -= 360 while pos[0] > 180

      @clickMarkerId = "click"
      @setMarker(pos, { image: @clickIcon, id: @clickMarkerId })
      if $(".map-clicked").length
        @setMapLoc($(".map-clicked"), pos[1], pos[0])

  createMarkerStyle: (iconSrc) ->
    new ol.style.Style({
      image: new ol.style.Icon({
        anchor: [0.5, 1]
        anchorXUnits: 'fraction'
        anchorYUnits: 'fraction'
        src: iconSrc
      })
    })

  setMarker: (loc, opts={}) ->
    src = @markerIcon
    src = opts['image'] if opts['image']

    style = new ol.style.Style({
      image: new ol.style.Icon({
        anchor: [0.5, 1]
        anchorXUnits: 'fraction'
        anchorYUnits: 'fraction'
        src: src
      })
    })

    pos = [loc[0], loc[1]]
    feature = new ol.Feature({
      geometry: new ol.geom.Point(ol.proj.transform(pos, "EPSG:4326", "EPSG:3857"))
      markerId: (opts['id'] ? null)
      markerHtml: (opts['html'] ? null)
      category: (opts['category'] ? null)
      featureType: "marker"
    })
    feature.setStyle(style)

    if !@markerLayer
      @markerLayer = new ol.layer.Vector({
        source: new ol.source.Vector({
          features: [feature]
        })
      })
      @map.addLayer(@markerLayer)
    else
      @markerLayer.getSource().addFeature(feature)

    return feature

  getMarker: (markerId) ->
    ret = null
    return ret unless @markerLayer

    source = @markerLayer.getSource()
    source.forEachFeature (feature) ->
      if feature.get("markerId") == markerId
        ret = feature
    return ret

  getMarkers: ()->
    source = @markerLayer.getSource()
    features = source.getFeatures();
    return features

  getMarkerLayer: ()->
    @markerLayer

  getMap: ()->
    @map

  setCenter: (pos) ->
    @map.getView().setCenter(ol.proj.transform(pos, 'EPSG:4326', 'EPSG:3857'))

  setZoom: (level) ->
    @map.getView().setZoom(level)

  renderMarkers: (markers) ->
    for id, marker of markers
      iconSrc = '/assets/img/map-marker.png'
      iconSrc = marker['image'] if marker['image']
      style = @createMarkerStyle(iconSrc)

      markerHtml = ""
      name = marker['name']
      text = marker['text']
      if name
        markerHtml += '<p>' + name + '</p>'
      if text
        $.each text.split(/[\r\n]+/), ->
          if this.match(/^https?:\/\//)
            markerHtml += '<p><a href="' + this + '">' + this + '</a></p>'
          else
            markerHtml += '<p>' + this + '</p>'

      pos = [marker['loc']['lng'], marker['loc']['lat']]
      feature = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.transform(pos, "EPSG:4326", "EPSG:3857"))
        markerId: (marker['id'] ? id)
        markerHtml: (marker['html'] ? markerHtml)
        category: (marker['category'] ? null)
        iconSrc: iconSrc
        featureType: "marker"
      })
      feature.setStyle(style)

      if !@markerLayer
        @markerLayer = new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [feature]
          })
        })
        @map.addLayer(@markerLayer)
      else
        @markerLayer.getSource().addFeature(feature)

  resize: () ->
    return unless @markerLayer
    extent = @markerLayer.getSource().getExtent()
    @map.getView().fit(extent, @map.getSize())

class @Openlayers_Facility_Geolocation
  @setCircle :(map, loc, radius) ->
    ol_map = map.getMap()
    ol_layers = ol_map.getLayers()

    wgs84Sphere = new ol.Sphere(6378137)

    outer_style = new ol.style.Style({
      fill: new ol.style.Fill({
        color: 'rgba(255, 100, 50, 0.15)'
      })
      stroke: new ol.style.Stroke({
        width: 1,
        color: 'rgba(255, 100, 50, 0.8)'
      })
    })
    inner_style = new ol.style.Style({
      fill: new ol.style.Fill({
        color: 'rgba(255, 100, 50, 0.0)'
      })
      stroke: new ol.style.Stroke({
        width: 1,
        color: 'rgba(255, 100, 50, 0.8)'
      })
    })
    center_style = new ol.style.Style({
      image: new ol.style.Icon({
        anchor: [0.5, 1]
        anchorXUnits: 'fraction'
        anchorYUnits: 'fraction'
        src: '/assets/img/map-marker.png'
      })
    })

    outer_layer = new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: outer_style
    })
    inner_layer = new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: inner_style
    })
    center_layer = new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: center_style
    })

    ol_layers.insertAt(5, center_layer)
    ol_layers.insertAt(2, outer_layer)
    ol_layers.insertAt(2, inner_layer)

    feature = new ol.Feature({
      geometry: new ol.geom.Point(ol.proj.transform(loc, "EPSG:4326", "EPSG:3857"))
      featureType: "marker"
    })
    feature.setStyle(center_style)
    center_layer.getSource().addFeature(feature)

    circle4326 = ol.geom.Polygon.circular(wgs84Sphere, loc, radius, 64)
    circle4326.transform('EPSG:4326', 'EPSG:3857');
    feature = new ol.Feature(circle4326)
    outer_layer.getSource().addFeature(feature)

    extent = outer_layer.getSource().getExtent()
    ol_map.getView().fit(extent, ol_map.getSize())

    for inner_radius in [1000, 3000, 5000, 10000, 30000, 50000]
      if (radius - inner_radius) <= 0
        break
      circle4326 = ol.geom.Polygon.circular(wgs84Sphere, loc, inner_radius, 64)
      circle4326.transform('EPSG:4326', 'EPSG:3857');
      feature = new ol.Feature(circle4326)
      inner_layer.getSource().addFeature(feature)

  @render :(selector, opts = {})->
    # define functions
    slideSidebar = (column) ->
      if column && column.offset()
        columnTop = column.offset().top
        indexTop  = column.closest("#map-sidebar").offset().top
        scrolled  = column.closest("#map-sidebar").scrollTop()
        column.closest("#map-sidebar").animate({ scrollTop: columnTop - indexTop + scrolled }, 'fast')

    # setup map
    canvas = $(selector)[0]
    opts["clickEnabled"] = true
    map = new Openlayers_Geolocation_Map(canvas, opts)
    window.ol_map = map

    # setup geolocation search
    loc = opts["loc"]
    radius = opts["radius"]
    if loc && radius
      lat = loc[1]
      lon = loc[0]
      radius = radius * 1000
      Openlayers_Facility_Geolocation.setCircle(map, [parseFloat(lon), parseFloat(lat)], radius)
    else
      lat = Map.center[0]
      lon = Map.center[1]

    # setup geolocation
    $(".geolocation").on "click", () ->
      success = (position) ->
        loc = [position.coords.latitude, position.coords.longitude]
        r = $(".radius").val()
        $(".geolocation").text("位置情報取得に成功")
        layer = $(".switch-layer").val()
        #console.log(position.coords.latitude + "," + position.coords.longitude)

        form = $("<form>")
        form.append($("<input/>", name: "lon", value: loc[1], type: "hidden" ))
        form.append($("<input/>", name: "lat", value: loc[0], type: "hidden" ))
        form.append($("<input/>", name: "r", value: r, type: "hidden" ))
        form.append($("<input/>", name: "layer", value: layer, type: "hidden" ))
        form.appendTo("body")
        form.submit()

      error = (error) ->
        errorMessage = {
          0: "位置情報の取得に失敗しました。" ,
          1: "位置情報の取得が許可されませんでした。" ,
          2: "位置情報の取得に失敗しました。" ,
          3: "位置情報の取得に失敗しました。" ,
        }
        alert(errorMessage[error.code] + " ERROR(" + error.code + ")" + error.message)
        $(".geolocation").text("現在地から検索")
        $(".geolocation").removeAttr("disabled")

      option = {
        "enableHighAccuracy": true,
        "maximumAge": 30000,
        #"timeout": 8000,
      }

      if(navigator.geolocation)
        $(".geolocation").text("現在地を取得しています...")
        $(".geolocation").attr("disabled", "disabled")
        navigator.geolocation.getCurrentPosition(success, error, option)
      else
        alert("お使いの端末では、現在位置を取得できませんでした。")

    # setup geolocation search
    $(".map-search").on "click", () ->
      loc = $(".current-loc").val()

      if $(".map-clicked").val()
        loc = $(".map-clicked").val()
      if !loc
        return false

      loc = loc.split(",")
      r = $(".radius").val()
      layer = $(".switch-layer").val()

      form = $("<form>")
      form.append($("<input/>", name: "lon", value: loc[0], type: "hidden" ))
      form.append($("<input/>", name: "lat", value: loc[1], type: "hidden" ))
      form.append($("<input/>", name: "r", value: r, type: "hidden" ))
      form.append($("<input/>", name: "layer", value: layer, type: "hidden" ))
      form.appendTo("body")
      form.submit()
      return false

    # setup geolocation radius
    #$(".radius").on "change", ->
    #  if !$(this).val()
    #    return false
    #
    #  loc = $(".current-loc").val()
    #
    #  if $(".map-clicked").val()
    #    loc = $(".map-clicked").val()
    #
    #  if !loc
    #    return false
    #
    #  loc = loc.split(",")
    #  r = $(".radius").val()
    #
    #  form = $("<form>")
    #  form.append($("<input/>", name: "lon", value: loc[0], type: "hidden" ))
    #  form.append($("<input/>", name: "lat", value: loc[1], type: "hidden" ))
    #  form.append($("<input/>", name: "r", value: r, type: "hidden" ))
    #  form.appendTo("body")
    #  form.submit()
    #  return false

    # setup geolocation facility-location
    $(".facility-location").on "change", ->
      if !$(this).val()
        return false

      loc = $(this).val().split(",")
      loc = [parseFloat(loc[0]), parseFloat(loc[1])]
      r = $(".radius").val()
      layer = $(".switch-laye").val()

      form = $("<form>")
      form.append($("<input/>", name: "lon", value: loc[0], type: "hidden" ))
      form.append($("<input/>", name: "lat", value: loc[1], type: "hidden" ))
      form.append($("<input/>", name: "r", value: r, type: "hidden" ))
      form.append($("<input/>", name: "layer", value: layer, type: "hidden" ))
      form.appendTo("body")
      form.submit()
      return false

    # setup geolocation switch-layer
    $(".switch-layer").on "change", ->
      map.setBaseLayer($(this).val())

    # setup markers
    overrided = map.showPopup
    map.showPopup = (feature, coordinate) ->
      overrided.call(map, feature, coordinate)
      $("#map-sidebar .column").removeClass("current")
      dataId = feature.get("markerId")
      column = $('#map-sidebar .column[data-id="' + dataId + '"]')
      column.addClass("current")
      slideSidebar(column)

    # setup categorybar filter
    if $("#map-categorybar").length
      $("#map-categorybar .filter").on "click", ->
        dataIds = []
        $("#map-categorybar .filter:checked").each ->
          dataIds.push parseInt($(this).attr("data-id"))

        markers = map.getMarkers()
        $.each markers, ->
          visible = false
          category = this.get("category")

          $.each dataIds, ->
            if $.inArray(parseInt(this), category) >= 0
              visible = true
              return false

          map.popup.hide()
          if visible
            iconSrc = this.get("iconSrc")
            style = map.createMarkerStyle(iconSrc)
            this.setStyle(style)
          else
            style = new ol.style.Style({})
            this.setStyle(style)
        return

      $("#map-categorybar .filter-all").on "click", ->
        visible = $(this).prop('checked')
        $("#map-categorybar .filter").prop("checked", visible)

        markers = map.getMarkers()
        $.each markers, ->
          map.popup.hide()
          if visible
            iconSrc = this.get("iconSrc")
            style = map.createMarkerStyle(iconSrc)
            this.setStyle(style)
          else
            style = new ol.style.Style({})
            this.setStyle(style)
        return

    # setup location filter
    $(".filters .focus").on "change", ->
      select = $(this)
      select.find("option:selected").each ->
        return false if $(this).val() == ""
        loc = $(this).val().split(",")
        zoomLevel = $(this).attr("data-zoom-level")
        pos = [parseFloat(loc[0]), parseFloat(loc[1])]
        map.setCenter(pos)
        map.setZoom(parseInt(zoomLevel)) if zoomLevel
        select.val("")
