<%

  addon ||= local_assigns.fetch(:addon, {})
  addon[:display_body] = "hide"

  @f = f

  @genres ||= begin
    genres = Guide::Node::Genre.site(@cur_site).sort(depth: 1, order: 1)
    first_node = genres.first
    if first_node.present?
      [first_node.parent].compact
    else
      []
    end
  end

  @genres = @genres.select do |genre|
    if genre.site.nil?
      Rails.logger.debug(genre.name)
    end
    genre.allowed?(:read, @cur_user, site: @cur_site, node: @cur_node)
  end
  return if @genres.blank?

  @genres = @genres.sort_by { |genre| genre.order }
  @disallowed_genres = @item.genres.select { |genre| !genre.allowed?(:read, @cur_user, site: @cur_site) }

  def genre_form(item)
    item = item.becomes_with_route
    children = item.children.and_public.allow(:read, @cur_user).sort(order: 1)
    if children.size > 0
      cc = children.map { |c| c.children.size }.max != 0
      h = %(<label class="parent">)
      if item.is_a?(Guide::Node::Genre)
        h << @f.check_box("genre_ids[]", {}, item._id)
      end
      h << %(#{item.name}</label>)
      h << %(<div class="child #{cc ? 'grandchild' : ''}">).html_safe
      children.each { |c| h += genre_form(c) }
      h << %(</div>).html_safe
      @disallowed_genres.delete(item)
    else
      h  = %(<label>)
      if item.is_a?(Guide::Node::Genre)
        h << @f.check_box("genre_ids[]", {}, item._id)
      end
      h << %(#{item.name}</label>)
      @disallowed_genres.delete(item)
    end

    h.html_safe
  end

  def name_hier(genre)
    names = []
    names << genre.name
    while genre.parent.present?
      genre = genre.parent
      names << genre.name
    end
    names.reverse.join('/')
  end

%>
<dl class="see category-form mod-guide-genre">
  <dd class="wide allowed-categories">
    <%= f.hidden_field "genre_ids[]", value: "" %>

    <% @genres.each do |genre| %>
      <div class="parent">
        <%= genre_form(genre) %>
      </div>
    <% end %>
  </dd>
</dl>
